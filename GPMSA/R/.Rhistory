# x_native[i,3] <- as.numeric(unlist(strsplit(unlist(strsplit(files[i], '_'))[4], '.csv')))
}
View(sim_native)
obs <- read.csv('../../Data/csv/20150311_mea_abs.csv', stringsAsFactors = F)
obs <- ifelse(obs[,2]<0, 0, obs[,2])
## a simple plot of obs and sim
par(mfrow=c(1,1))
plot(NA, xlim = c(0,90), ylim = c(0,2), axes = F, ylab = "euvac", xlab = 'time (seconds)')
matplot(sim_native, col = 'grey', type = "l", add = T)
lines(obs, col = 'black', lty = 2, lwd = 2)
axis(1)
axis(2)
legend(60,4,c('sim','obs'), col=c('grey','black'),lty = c(3,2))
obs <- obs[,2]
plot(3:10, main = "Axis break test")
# put a break at the default axis and position
axis.break()
axis.break(2, 2.9, style = "zigzag")
twogrp <- c(rnorm(10) + 4, rnorm(10) + 20)
gap.plot(twogrp,gap = c(8,16), xlab = "Index", ylab = "Group values",
main = "Two separated groups with gap axis break",
col = c(rep(2, 10), rep(3, 10)), ytics = c(3, 5, 18, 20))
legend(12, 6, c("Low group", "High group"), pch = 1, col = 2:3)
# }
install.packages('plotrix')
library(plotrix)
plot(3:10, main = "Axis break test")
# put a break at the default axis and position
axis.break()
axis.break(2, 2.9, style = "zigzag")
twogrp <- c(rnorm(10) + 4, rnorm(10) + 20)
gap.plot(twogrp,gap = c(8,16), xlab = "Index", ylab = "Group values",
main = "Two separated groups with gap axis break",
col = c(rep(2, 10), rep(3, 10)), ytics = c(3, 5, 18, 20))
legend(12, 6, c("Low group", "High group"), pch = 1, col = 2:3)
# }
?gap.boxplot
twovec<-list(vec1=c(rnorm(30),-6),vec2=c(sample(1:10,40,TRUE),20))
gap.boxplot(twovec,gap=list(top=c(12,18),bottom=c(-5,-3)),
main="Show outliers separately")
if(dev.interactive()) par(ask=TRUE)
gap.boxplot(twovec,gap=list(top=c(12,18),bottom=c(-5,-3)),range=0,
main="Include outliers in whiskers")
hist(rnorm(100), plot=F)
hist(rnorm(100))
plot(c(3,  5,  7,  7, 24, 16, 22,  9,  3,  3,  1), type="h")
barplot(c(3,  5,  7,  7, 24, 16, 22,  9,  3,  3,  1))
setwd("~/Documents/shibaji/git/CMS/R/script")
files <- list.dirs('../../Data/csv/')
nfile <- length(files)
files <- list.dirs('../../Data/csv/')
nfile <- length(files)
obs_mat <- matrix(NA, ncol = nfile, nrow = 90)
for (i in 1:nfile){
d <- read.csv(paste0('../../Data/csv/', files[i]), stringsAsFactors = F)
obs_mat[,i] <- d[,2]
}
i
paste0('../../Data/csv/', files[i]
)
files <- list.dirs('../../Data/csv/')
files <- list.files('../../Data/csv/', pattern = '.csv')
nfile <- length(files)
obs_mat <- matrix(NA, ncol = nfile, nrow = 90)
for (i in 1:nfile){
d <- read.csv(paste0('../../Data/csv/', files[i]), stringsAsFactors = F)
obs_mat[,i] <- d[,2]
}
View(d)
i
files[i]
files <- list.files('../../Data/csv/', pattern = '.csv')
nfile <- length(files)
obs_mat <- matrix(NA, ncol = nfile, nrow = 90)
for (i in 1:nfile){
if (i!=6){
d <- read.csv(paste0('../../Data/csv/', files[i]), stringsAsFactors = F)
obs_mat[,i] <- d[,2]}
}
i
files[18]
files <- list.files('../../Data/csv/', pattern = '.csv')
nfile <- length(files)
obs_mat <- matrix(NA, ncol = nfile, nrow = 90)
for (i in 1:nfile){
d <- read.csv(paste0('../../Data/csv/', files[i]), stringsAsFactors = F)
obs_mat[,i] <- d[,2]
}
matplot(obs_mat, type="l")
setwd("~/Documents/shibaji/git/CMS/R/script")
files <- c('../../Data/csv/20150311_brd_abs.csv',
'../../Data/csv/20150311_gill_abs.csv',
'../../Data/csv/20150311_mea_abs.csv',
'../../Data/csv/20150311_ott_abs.csv')
nfile <- length(files)
obs_mat <- matrix(NA, ncol = nfile, nrow = 90)
for (i in 1:nfile){
d <- read.csv(paste0('../../Data/csv/', files[i]), stringsAsFactors = F)
obs_mat[,i] <- d[,2]
}
matplot(obs_mat, type="l")
setwd("~/Documents/shibaji/git/CMS/GPMSA/R")
simout_path <- '../../out/mea_73.02/'
files <- list.files(simout_path, pattern = "csv")
nfile <- length(files)
m <- nfile
nlag <- 1
sim_native <- matrix(NA, nrow = 90*nlag, ncol = m)
# x_native <- matrix(NA, nrow = m, ncol = 2)
x_native <- matrix(NA, nrow = m, ncol = 2)
for (i in 1:nfile){
# read data
d <- read.csv(paste0(simout_path, files[i]), stringsAsFactors = F)
sim_native[,i] <- d$euvac
# extract input from file name
x_native[i,1] <- as.numeric(unlist(strsplit(files[i], '_'))[2])
x_native[i,2] <- as.numeric(unlist(strsplit(unlist(strsplit(files[i], '_'))[3], '.csv')))
# x_native[i,2] <- as.numeric(unlist(strsplit(files[i], '_'))[3])
# x_native[i,3] <- as.numeric(unlist(strsplit(unlist(strsplit(files[i], '_'))[4], '.csv')))
}
pairs(x_native, labels = c(expression(eta), expression(alpha), "sza"))
## read observed data
obs <- read.csv('../../Data/csv/20150311_mea_abs.csv', stringsAsFactors = F)
# obs <- ifelse(obs[,2]<0, 0, obs[,2])
obs <- obs[,2]
## a simple plot of obs and sim
par(mfrow=c(1,1))
plot(NA, xlim = c(0,90), ylim = c(0,2), axes = F, ylab = "euvac", xlab = 'time (seconds)')
lines(obs, col = 'black', lty = 2, lwd = 2)
axis(1)
axis(2)
legend(60,4,c('sim','obs'), col=c('grey','black'),lty = c(3,2))
simout_path <- '../../out/mea_73.02/'
files <- list.files(simout_path, pattern = "csv")
nfile <- length(files)
m <- nfile
nlag <- 1
sim_native <- matrix(NA, nrow = 90*nlag, ncol = m)
# x_native <- matrix(NA, nrow = m, ncol = 2)
x_native <- matrix(NA, nrow = m, ncol = 2)
for (i in 1:nfile){
# read data
d <- read.csv(paste0(simout_path, files[i]), stringsAsFactors = F)
sim_native[,i] <- d$euvac
# extract input from file name
x_native[i,1] <- as.numeric(unlist(strsplit(files[i], '_'))[2])
x_native[i,2] <- as.numeric(unlist(strsplit(unlist(strsplit(files[i], '_'))[3], '.csv')))
# x_native[i,2] <- as.numeric(unlist(strsplit(files[i], '_'))[3])
# x_native[i,3] <- as.numeric(unlist(strsplit(unlist(strsplit(files[i], '_'))[4], '.csv')))
}
pairs(x_native, labels = c(expression(eta), expression(alpha), "sza"))
## read observed data
obs <- read.csv('../../Data/csv/20150311_mea_abs.csv', stringsAsFactors = F)
# obs <- ifelse(obs[,2]<0, 0, obs[,2])
obs <- obs[,2]
## a simple plot of obs and sim
par(mfrow=c(1,1))
plot(NA, xlim = c(0,90), ylim = c(0,2), axes = F, ylab = "euvac", xlab = 'time (seconds)')
matplot(sim_native, col = 'grey', type = "l", add = T)
lines(obs, col = 'black', lty = 2, lwd = 2)
axis(1)
axis(2)
legend(60,4,c('sim','obs'), col=c('grey','black'),lty = c(3,2))
setwd("~/Documents/shibaji/git/CMS/R/script")
files <- c('../../Data/csv/20150311_brd_abs.csv',
'../../Data/csv/20150311_gill_abs.csv',
'../../Data/csv/20150311_mea_abs.csv',
'../../Data/csv/20150311_ott_abs.csv')
nfile <- length(files)
obs_mat <- matrix(NA, ncol = nfile, nrow = 90)
for (i in 1:nfile){
d <- read.csv(paste0('../../Data/csv/', files[i]), stringsAsFactors = F)
obs_mat[,i] <- d[,2]
}
matplot(obs_mat, type="l")
setwd("~/Documents/shibaji/git/CMS/GPMSA/R")
simout_path <- '../../out/ott_51.05/'
files <- list.files(simout_path, pattern = "csv")
nfile <- length(files)
m <- nfile
nlag <- 1
sim_native <- matrix(NA, nrow = 90*nlag, ncol = m)
# x_native <- matrix(NA, nrow = m, ncol = 2)
x_native <- matrix(NA, nrow = m, ncol = 2)
for (i in 1:nfile){
# read data
d <- read.csv(paste0(simout_path, files[i]), stringsAsFactors = F)
sim_native[,i] <- d$euvac
# extract input from file name
x_native[i,1] <- as.numeric(unlist(strsplit(files[i], '_'))[2])
x_native[i,2] <- as.numeric(unlist(strsplit(unlist(strsplit(files[i], '_'))[3], '.csv')))
# x_native[i,2] <- as.numeric(unlist(strsplit(files[i], '_'))[3])
# x_native[i,3] <- as.numeric(unlist(strsplit(unlist(strsplit(files[i], '_'))[4], '.csv')))
}
pairs(x_native, labels = c(expression(eta), expression(alpha), "sza"))
## read observed data
obs <- read.csv('../../Data/csv/20150311_ott_abs.csv', stringsAsFactors = F)
# obs <- ifelse(obs[,2]<0, 0, obs[,2])
obs <- obs[,2]
## a simple plot of obs and sim
par(mfrow=c(1,1))
plot(NA, xlim = c(0,90), ylim = c(0,2), axes = F, ylab = "euvac", xlab = 'time (seconds)')
matplot(sim_native, col = 'grey', type = "l", add = T)
lines(obs, col = 'black', lty = 2, lwd = 2)
axis(1)
axis(2)
legend(60,4,c('sim','obs'), col=c('grey','black'),lty = c(3,2))
par(mfrow=c(1,1))
plot(NA, xlim = c(0,90), ylim = c(0,5), axes = F, ylab = "euvac", xlab = 'time (seconds)')
matplot(sim_native, col = 'grey', type = "l", add = T)
lines(obs, col = 'black', lty = 2, lwd = 2)
axis(1)
axis(2)
legend(60,4,c('sim','obs'), col=c('grey','black'),lty = c(3,2))
setwd("~/Documents/shibaji/git/CMS/GPMSA/R")
## prepare sim data
## eta_n x m matrix where m is the number of unique input settings
## and eta_n is the length of each output
simout_path <- '../../out/ott_51.05/'
files <- list.files(simout_path, pattern = "csv")
nfile <- length(files)
m <- nfile
nlag <- 1
sim_native <- matrix(NA, nrow = 90*nlag, ncol = m)
# x_native <- matrix(NA, nrow = m, ncol = 2)
x_native <- matrix(NA, nrow = m, ncol = 2)
for (i in 1:nfile){
# read data
d <- read.csv(paste0(simout_path, files[i]), stringsAsFactors = F)
sim_native[,i] <- d$euvac
# extract input from file name
x_native[i,1] <- as.numeric(unlist(strsplit(files[i], '_'))[2])
x_native[i,2] <- as.numeric(unlist(strsplit(unlist(strsplit(files[i], '_'))[3], '.csv')))
# x_native[i,2] <- as.numeric(unlist(strsplit(files[i], '_'))[3])
# x_native[i,3] <- as.numeric(unlist(strsplit(unlist(strsplit(files[i], '_'))[4], '.csv')))
}
pairs(x_native, labels = c(expression(eta), expression(alpha), "sza"))
## read observed data
obs <- read.csv('../../Data/csv/20150311_ott_abs.csv', stringsAsFactors = F)
# obs <- ifelse(obs[,2]<0, 0, obs[,2])
obs <- obs[,2]
## a simple plot of obs and sim
par(mfrow=c(1,1))
plot(NA, xlim = c(0,90), ylim = c(0,5), axes = F, ylab = "euvac", xlab = 'time (seconds)')
matplot(sim_native, col = 'grey', type = "l", add = T)
lines(obs, col = 'black', lty = 2, lwd = 2)
axis(1)
axis(2)
legend(60,4,c('sim','obs'), col=c('grey','black'),lty = c(3,2))
write.table(x_native, file="design_ott.txt", quote = F, row.names = F, col.names = F)
write.table(matrix(obs, ncol = 1), file="obs_ott.txt", quote = F, row.names = F, col.names = F)
write.table(sim_native, file="sim_ott.txt", quote = F, row.names = F, col.names = F)
## prepare sim data
## eta_n x m matrix where m is the number of unique input settings
## and eta_n is the length of each output
simout_path <- '../../out/mea_73.02/'
files <- list.files(simout_path, pattern = "csv")
nfile <- length(files)
m <- nfile
nlag <- 1
sim_native <- matrix(NA, nrow = 90*nlag, ncol = m)
# x_native <- matrix(NA, nrow = m, ncol = 2)
x_native <- matrix(NA, nrow = m, ncol = 2)
for (i in 1:nfile){
# read data
d <- read.csv(paste0(simout_path, files[i]), stringsAsFactors = F)
sim_native[,i] <- d$euvac
# extract input from file name
x_native[i,1] <- as.numeric(unlist(strsplit(files[i], '_'))[2])
x_native[i,2] <- as.numeric(unlist(strsplit(unlist(strsplit(files[i], '_'))[3], '.csv')))
# x_native[i,2] <- as.numeric(unlist(strsplit(files[i], '_'))[3])
# x_native[i,3] <- as.numeric(unlist(strsplit(unlist(strsplit(files[i], '_'))[4], '.csv')))
}
pairs(x_native, labels = c(expression(eta), expression(alpha), "sza"))
## read observed data
obs <- read.csv('../../Data/csv/20150311_mea_abs.csv', stringsAsFactors = F)
# obs <- ifelse(obs[,2]<0, 0, obs[,2])
obs <- obs[,2]
## a simple plot of obs and sim
par(mfrow=c(1,1))
plot(NA, xlim = c(0,90), ylim = c(0,5), axes = F, ylab = "euvac", xlab = 'time (seconds)')
matplot(sim_native, col = 'grey', type = "l", add = T)
lines(obs, col = 'black', lty = 2, lwd = 2)
axis(1)
axis(2)
legend(60,4,c('sim','obs'), col=c('grey','black'),lty = c(3,2))
write.table(x_native, file="design_mea.txt", quote = F, row.names = F, col.names = F)
write.table(matrix(obs, ncol = 1), file="obs_mea.txt", quote = F, row.names = F, col.names = F)
write.table(sim_native, file="sim_mea.txt", quote = F, row.names = F, col.names = F)
## prepare sim data
## eta_n x m matrix where m is the number of unique input settings
## and eta_n is the length of each output
simout_path <- '../../out/gill_69.8/'
files <- list.files(simout_path, pattern = "csv")
nfile <- length(files)
m <- nfile
nlag <- 1
sim_native <- matrix(NA, nrow = 90*nlag, ncol = m)
# x_native <- matrix(NA, nrow = m, ncol = 2)
x_native <- matrix(NA, nrow = m, ncol = 2)
for (i in 1:nfile){
# read data
d <- read.csv(paste0(simout_path, files[i]), stringsAsFactors = F)
sim_native[,i] <- d$euvac
# extract input from file name
x_native[i,1] <- as.numeric(unlist(strsplit(files[i], '_'))[2])
x_native[i,2] <- as.numeric(unlist(strsplit(unlist(strsplit(files[i], '_'))[3], '.csv')))
# x_native[i,2] <- as.numeric(unlist(strsplit(files[i], '_'))[3])
# x_native[i,3] <- as.numeric(unlist(strsplit(unlist(strsplit(files[i], '_'))[4], '.csv')))
}
pairs(x_native, labels = c(expression(eta), expression(alpha), "sza"))
## read observed data
obs <- read.csv('../../Data/csv/20150311_gill_abs.csv', stringsAsFactors = F)
# obs <- ifelse(obs[,2]<0, 0, obs[,2])
obs <- obs[,2]
## a simple plot of obs and sim
par(mfrow=c(1,1))
plot(NA, xlim = c(0,90), ylim = c(0,5), axes = F, ylab = "euvac", xlab = 'time (seconds)')
matplot(sim_native, col = 'grey', type = "l", add = T)
lines(obs, col = 'black', lty = 2, lwd = 2)
axis(1)
axis(2)
legend(60,4,c('sim','obs'), col=c('grey','black'),lty = c(3,2))
write.table(x_native, file="design_gill.txt", quote = F, row.names = F, col.names = F)
write.table(matrix(obs, ncol = 1), file="obs_gill.txt", quote = F, row.names = F, col.names = F)
write.table(sim_native, file="sim_gill.txt", quote = F, row.names = F, col.names = F)
## prepare sim data
## eta_n x m matrix where m is the number of unique input settings
## and eta_n is the length of each output
simout_path <- '../../out/brd_69.8/'
files <- list.files(simout_path, pattern = "csv")
nfile <- length(files)
m <- nfile
nlag <- 1
sim_native <- matrix(NA, nrow = 90*nlag, ncol = m)
# x_native <- matrix(NA, nrow = m, ncol = 2)
x_native <- matrix(NA, nrow = m, ncol = 2)
for (i in 1:nfile){
# read data
d <- read.csv(paste0(simout_path, files[i]), stringsAsFactors = F)
sim_native[,i] <- d$euvac
# extract input from file name
x_native[i,1] <- as.numeric(unlist(strsplit(files[i], '_'))[2])
x_native[i,2] <- as.numeric(unlist(strsplit(unlist(strsplit(files[i], '_'))[3], '.csv')))
# x_native[i,2] <- as.numeric(unlist(strsplit(files[i], '_'))[3])
# x_native[i,3] <- as.numeric(unlist(strsplit(unlist(strsplit(files[i], '_'))[4], '.csv')))
}
pairs(x_native, labels = c(expression(eta), expression(alpha), "sza"))
## read observed data
obs <- read.csv('../../Data/csv/20150311_brd_abs.csv', stringsAsFactors = F)
# obs <- ifelse(obs[,2]<0, 0, obs[,2])
obs <- obs[,2]
## a simple plot of obs and sim
par(mfrow=c(1,1))
plot(NA, xlim = c(0,90), ylim = c(0,5), axes = F, ylab = "euvac", xlab = 'time (seconds)')
matplot(sim_native, col = 'grey', type = "l", add = T)
lines(obs, col = 'black', lty = 2, lwd = 2)
axis(1)
axis(2)
legend(60,4,c('sim','obs'), col=c('grey','black'),lty = c(3,2))
write.table(x_native, file="design_brd.txt", quote = F, row.names = F, col.names = F)
write.table(matrix(obs, ncol = 1), file="obs_brd.txt", quote = F, row.names = F, col.names = F)
write.table(sim_native, file="sim_brd.txt", quote = F, row.names = F, col.names = F)
View(sim_native)
## prepare sim data
## eta_n x m matrix where m is the number of unique input settings
## and eta_n is the length of each output
simout_path <- '../../out/brd_63.74/'
files <- list.files(simout_path, pattern = "csv")
nfile <- length(files)
m <- nfile
nlag <- 1
sim_native <- matrix(NA, nrow = 90*nlag, ncol = m)
# x_native <- matrix(NA, nrow = m, ncol = 2)
x_native <- matrix(NA, nrow = m, ncol = 2)
for (i in 1:nfile){
# read data
d <- read.csv(paste0(simout_path, files[i]), stringsAsFactors = F)
sim_native[,i] <- d$euvac
# extract input from file name
x_native[i,1] <- as.numeric(unlist(strsplit(files[i], '_'))[2])
x_native[i,2] <- as.numeric(unlist(strsplit(unlist(strsplit(files[i], '_'))[3], '.csv')))
# x_native[i,2] <- as.numeric(unlist(strsplit(files[i], '_'))[3])
# x_native[i,3] <- as.numeric(unlist(strsplit(unlist(strsplit(files[i], '_'))[4], '.csv')))
}
pairs(x_native, labels = c(expression(eta), expression(alpha), "sza"))
## read observed data
obs <- read.csv('../../Data/csv/20150311_brd_abs.csv', stringsAsFactors = F)
# obs <- ifelse(obs[,2]<0, 0, obs[,2])
obs <- obs[,2]
## a simple plot of obs and sim
par(mfrow=c(1,1))
plot(NA, xlim = c(0,90), ylim = c(0,5), axes = F, ylab = "euvac", xlab = 'time (seconds)')
matplot(sim_native, col = 'grey', type = "l", add = T)
lines(obs, col = 'black', lty = 2, lwd = 2)
axis(1)
axis(2)
legend(60,4,c('sim','obs'), col=c('grey','black'),lty = c(3,2))
write.table(x_native, file="design_brd.txt", quote = F, row.names = F, col.names = F)
write.table(matrix(obs, ncol = 1), file="obs_brd.txt", quote = F, row.names = F, col.names = F)
write.table(sim_native, file="sim_brd.txt", quote = F, row.names = F, col.names = F)
simout_path <- '../../out/gill_69.8/'
files <- list.files(simout_path, pattern = "csv")
nfile <- length(files)
m <- nfile
nlag <- 1
sim_native <- matrix(NA, nrow = 90*nlag, ncol = m)
# x_native <- matrix(NA, nrow = m, ncol = 2)
x_native <- matrix(NA, nrow = m, ncol = 2)
for (i in 1:nfile){
# read data
d <- read.csv(paste0(simout_path, files[i]), stringsAsFactors = F)
sim_native[,i] <- d$euvac
# extract input from file name
x_native[i,1] <- as.numeric(unlist(strsplit(files[i], '_'))[2])
x_native[i,2] <- as.numeric(unlist(strsplit(unlist(strsplit(files[i], '_'))[3], '.csv')))
# x_native[i,2] <- as.numeric(unlist(strsplit(files[i], '_'))[3])
# x_native[i,3] <- as.numeric(unlist(strsplit(unlist(strsplit(files[i], '_'))[4], '.csv')))
}
pairs(x_native, labels = c(expression(eta), expression(alpha), "sza"))
## read observed data
obs <- read.csv('../../Data/csv/20150311_gill_abs.csv', stringsAsFactors = F)
# obs <- ifelse(obs[,2]<0, 0, obs[,2])
obs <- obs[,2]
## a simple plot of obs and sim
par(mfrow=c(1,1))
plot(NA, xlim = c(0,90), ylim = c(0,5), axes = F, ylab = "euvac", xlab = 'time (seconds)')
matplot(sim_native, col = 'grey', type = "l", add = T)
lines(obs, col = 'black', lty = 2, lwd = 2)
axis(1)
axis(2)
legend(60,4,c('sim','obs'), col=c('grey','black'),lty = c(3,2))
par(mfrow=c(1,1))
plot(NA, xlim = c(0,90), ylim = c(0,2), axes = F, ylab = "euvac", xlab = 'time (seconds)')
matplot(sim_native, col = 'grey', type = "l", add = T)
lines(obs, col = 'black', lty = 2, lwd = 2)
axis(1)
axis(2)
legend(60,4,c('sim','obs'), col=c('grey','black'),lty = c(3,2))
simout_path <- '../../out/ott_51.05/'
files <- list.files(simout_path, pattern = "csv")
nfile <- length(files)
m <- nfile
nlag <- 1
sim_native <- matrix(NA, nrow = 90*nlag, ncol = m)
# x_native <- matrix(NA, nrow = m, ncol = 2)
x_native <- matrix(NA, nrow = m, ncol = 2)
for (i in 1:nfile){
# read data
d <- read.csv(paste0(simout_path, files[i]), stringsAsFactors = F)
sim_native[,i] <- d$euvac
# extract input from file name
x_native[i,1] <- as.numeric(unlist(strsplit(files[i], '_'))[2])
x_native[i,2] <- as.numeric(unlist(strsplit(unlist(strsplit(files[i], '_'))[3], '.csv')))
# x_native[i,2] <- as.numeric(unlist(strsplit(files[i], '_'))[3])
# x_native[i,3] <- as.numeric(unlist(strsplit(unlist(strsplit(files[i], '_'))[4], '.csv')))
}
pairs(x_native, labels = c(expression(eta), expression(alpha), "sza"))
## read observed data
obs <- read.csv('../../Data/csv/20150311_ott_abs.csv', stringsAsFactors = F)
# obs <- ifelse(obs[,2]<0, 0, obs[,2])
obs <- obs[,2]
## a simple plot of obs and sim
par(mfrow=c(1,1))
plot(NA, xlim = c(0,90), ylim = c(0,2), axes = F, ylab = "euvac", xlab = 'time (seconds)')
matplot(sim_native, col = 'grey', type = "l", add = T)
lines(obs, col = 'black', lty = 2, lwd = 2)
axis(1)
axis(2)
legend(60,4,c('sim','obs'), col=c('grey','black'),lty = c(3,2))
par(mfrow=c(1,1))
plot(NA, xlim = c(0,90), ylim = c(0,5), axes = F, ylab = "euvac", xlab = 'time (seconds)')
matplot(sim_native, col = 'grey', type = "l", add = T)
lines(obs, col = 'black', lty = 2, lwd = 2)
axis(1)
axis(2)
legend(60,4,c('sim','obs'), col=c('grey','black'),lty = c(3,2))
pdf=T
PDF=T
if(PDF) pdf('../plots/sim-obs.pdf', width = 9, height = 6)
par(mfrow=c(1,1))
plot(NA, xlim = c(0,90), ylim = c(0,5), axes = F, ylab = "euvac", xlab = 'time (seconds)')
matplot(sim_native, col = 'grey', type = "l", add = T)
lines(obs, col = 'black', lty = 2, lwd = 2)
axis(1)
axis(2)
legend(60,4,c('sim','obs'), col=c('grey','black'),lty = c(3,2))
if(PDF) dev.off()
pairs(x_native, labels = c(expression(eta), expression(alpha)))
pairs(x_native, labels = c(expression(eta), expression(alpha)), gap=0)
if(PDF) pdf('design.pdf', width=6, height=6)
pairs(x_native, labels = c(expression(eta), expression(alpha)), gap=0)
if(PDF) dev.off()
if(PDF) pdf('../plots/design.pdf', width=6, height=6)
pairs(x_native, labels = c(expression(eta), expression(alpha)), gap=0)
if(PDF) dev.off()
?jpeg
if(PDF) jpeg('../plots/design.jpeg', width=480, height=480)
pairs(x_native, labels = c(expression(eta), expression(alpha)), gap=0)
if(PDF) dev.off()
if(PDF) jpeg('../plots/design.jpeg', width=880, height=880)
pairs(x_native, labels = c(expression(eta), expression(alpha)), gap=0)
if(PDF) dev.off()
if(PDF) jpeg('../plots/sim-obs.jpeg', width = 1000, height = 600)
par(mfrow=c(1,1))
plot(NA, xlim = c(0,90), ylim = c(0,5), axes = F, ylab = "euvac", xlab = 'time (seconds)')
matplot(sim_native, col = 'grey', type = "l", add = T)
lines(obs, col = 'black', lty = 2, lwd = 2)
axis(1)
axis(2)
legend(60,4,c('sim','obs'), col=c('grey','black'),lty = c(3,2))
if(PDF) dev.off()
